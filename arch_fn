#!/bin/bash

_cmd_() {
    echo -en "\n\e[1;32m$@\e[0;0m\n\n" 1>&2
    if [ "$EVAL1" = "1" ]; then
        eval "$1"
    else
        "$@"
    fi
}
export -f _cmd_

lines() {
    local target="$1"
    echo -en "\n\e[1;32mconfiguring $target\e[0;0m\n\n" 1>&2
    for i in $(seq 2 ${#}); do
        echo "${!i}" >> "$target"
    done
}
export -f lines

if-correct-partition() {
    test $j = $num
}

partition-create() {
    _cmd_ sgdisk $disk --new $i:$size --typecode $i:$typecode --change-name $i:$label --attributes $i:set:63 $n
}

partition-disk() {
    local j
    _cmd_ sgdisk $disk --zap-all
    for j in `seq 1 ${#partitions[*]}`; do
        foreach-partition partition-create if-correct-partition
    done
    case $parttype in
        mbr) _cmd_ sgdisk $disk --gpttombr 1:2:3:4
             _cmd_ sgdisk $disk --print-mbr ;;
        gpt) _cmd_ sgdisk $disk --print ;;
    esac
}

if-partition-is-luks() {
    test $encryption = luks
}
partition-luks-gen-key() {
    _cmd_ dd bs=1 count=32 if=/dev/random of=/tmp/luks.keys/$label.key
}

partition-luks-encrypt() {
    _cmd_ cryptsetup luksFormat -q -d /tmp/luks.keys/$label.key -s 512 $disk$num
}

partition-luks-add-key() {
    _cmd_ cryptsetup luksAddKey -q -d /tmp/luks.keys/$label.key $disk$num \
        <(echo -n "$INSTALL_PASSWORD")
}

partition-luks-decrypt() {
    _cmd_ cryptsetup luksOpen -q -d /tmp/luks.keys/$label.key $disk$num $label
}

partition-luks-crypttab() {
    lines /tmp/crypttab "$label $disk$num /etc/luks.keys/$label.key"
}

partition-format() {
    local i dev num size typecode label fstype mountpoint
    for i in $(seq 1 $#); do
        read num size typecode label fstype mountpoint <<< "${!i}"
        for dev in /dev/mapper/${label} /dev/disk/by-partlabel/${label} ${disk}${num}; do
            [ -e ${dev} ] && break
        done 
        case ${fstype} in
            swap)   _cmd_ mkswap -L ${label} ${dev} ;;
            ext4)   _cmd_ mkfs.ext4 -L ${label} ${dev} ;;
            vfat)   _cmd_ mkfs.vfat -n ${label} ${dev} ;;
            -)      ;;
            *)      echo "$FUNCNAME: unkown fstype ${fstype}" >&2 ; exit 1 ;;
        esac
    done
}

partition-mount() {
    local i num size typecode label fstype mountpoint
    for i in $(seq 1 $#); do
        read num size typecode label fstype mountpoint <<< "${!i}"
        case ${fstype} in
            swap)
                _cmd_ swapon -v LABEL=${label}
                ;;
            -)  ;;
            *)
                _cmd_ mkdir -vp /mnt${mountpoint}
                _cmd_ mount -v LABEL=${label} /mnt${mountpoint}
                ;;
        esac
    done
}

partition() {
    disk=$1 ; parttype=$2 ; shift 2

    partition-with-sgdisk "${@}"
    if [ ${INSTALL_DISK_ENCRYPTION} = luks ]; then
        partition-encrypt "${@}"
    fi
    partition-format "${@}"
    partition-mount "${@}"
}

export -f partition partition-with-sgdisk partition-encrypt partition-format partition-mount
